// модели беккенда для посгресса от клиента до покупок 

generator client {
     provider = "prisma-client-js" //работа с js клиентом
      binaryTargets = ["native", "windows"]
}

datasource db {
     provider  = "postgresql" // работа с постгрес база данных
     url       = env("POSTGRES_URL") // ссылка на базу данных
     directUrl = env("POSTGRES_URL_NON_POOLING") // ссылка на базу данных без пуллинга
}

model User {
     id Int @id @default(autoincrement())

     fullName String
     email    String   @unique
     password String
     role     UserRole @default(USER)
     verified DateTime

     provider   String?
     providerId String?

     cart             Cart?
     orders           Order[]
     verificationCode VerificationCode?

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model Category {
     id Int @id @default(autoincrement())

     name String @unique

     product Product[] @relation("PRODUCTS")

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model Product {
     id Int @id @default(autoincrement())

     name     String
     imageUrl String

     ingredient  Ingredient[]
     productItem ProductItem[]

     category   Category @relation("PRODUCTS", fields: [categoryId], references: [id])
     categoryId Int

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model ProductItem {
     id Int @id @default(autoincrement())

     price     Int
     size      Int?
     pizzaType Int?

     cartItem CartItem[]

     product   Product @relation(fields: [productId], references: [id])
     productId Int
}

model Ingredient {
     id Int @id @default(autoincrement())

     name     String
     price    Int
     imageUrl String

     cartItem CartItem[]
     product  Product[]

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model Cart {
     id Int @id @default(autoincrement())

     user   User? @relation(fields: [userId], references: [id])
     userId Int?  @unique

     cartItem CartItem[]

     token String

     totalAmount Int @default(0)

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model CartItem {
     id Int @id @default(autoincrement())

     cart   Cart @relation(fields: [cartId], references: [id])
     cartId Int

     productItem   ProductItem @relation(fields: [productItemId], references: [id])
     productItemId Int

     quantity  Int
     pizzaSize Int?
     pizzaType Int?

     ingredient Ingredient[]

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model Order {
     id Int @id @default(autoincrement())

     user   User @relation(fields: [userId], references: [id])
     userId Int

     token String

     totalAmount Int         @default(0)
     status      OrderStatus
     paymentId   String?

     items Json

     fullName String
     email    String
     phone    String
     address  String
     comment  String?

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model VerificationCode {
     id Int @id @default(autoincrement())

     user   User @relation(fields: [userId], references: [id])
     userId Int  @unique

     code String @unique

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     @@unique([userId, code])
}

enum OrderStatus {
     PENDING
     SUCCEEDED
     CANCELLED
}

enum UserRole {
     USER
     ADMIN
}
